definitions:
  address.AddressCreateReq:
    properties:
      area:
        type: string
      city:
        type: string
      detail:
        type: string
      is_default:
        type: boolean
      province:
        type: string
    required:
    - area
    - city
    - detail
    - is_default
    - province
    type: object
  address.AddressCreateResp:
    properties:
      id:
        type: integer
    type: object
  address.AddressDeleteReq:
    properties:
      address_id:
        type: integer
    required:
    - address_id
    type: object
  group.GroupInfoResp:
    properties:
      count:
        type: integer
    type: object
  user.AuthReq:
    properties:
      account:
        type: string
      password:
        type: string
      type:
        enum:
        - name
        - phone
        example: name
        type: string
    required:
    - account
    - password
    - type
    type: object
  user.AuthResp:
    properties:
      login_type:
        type: string
      user_name:
        type: string
      user_phone:
        type: string
      user_role:
        type: integer
      user_token:
        type: string
    type: object
  user.UserCreateReq:
    properties:
      user_address:
        $ref: '#/definitions/user.UserCreateReqAddress'
      user_name:
        maxLength: 30
        type: string
      user_phone:
        example: "13800138000"
        maxLength: 20
        type: string
      user_role:
        example: 1
        type: integer
      user_secret:
        maxLength: 20
        type: string
    required:
    - user_address
    - user_name
    - user_phone
    - user_role
    - user_secret
    type: object
  user.UserCreateReqAddress:
    properties:
      area:
        type: string
      city:
        type: string
      detail:
        type: string
      province:
        type: string
    required:
    - area
    - city
    - detail
    - province
    type: object
  user.UserCreateResp:
    properties:
      id:
        type: integer
    type: object
  user.UserDashboardResp:
    properties:
      finished_groups:
        type: integer
      total_commodities:
        type: integer
      total_groups:
        type: integer
      total_users:
        type: integer
    type: object
  user.UserInfoResp:
    properties:
      user_address:
        items:
          $ref: '#/definitions/user.UserInfoRespAddress'
        type: array
      user_id:
        type: integer
      user_name:
        type: string
      user_phone:
        type: string
      user_role:
        type: integer
    type: object
  user.UserInfoRespAddress:
    properties:
      area:
        type: string
      city:
        type: string
      detail:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
      lat:
        type: number
      lng:
        type: number
      province:
        type: string
    type: object
  user.UserModifyReq:
    properties:
      user_default_address_id:
        type: integer
      user_name:
        type: string
      user_phone:
        type: string
      user_role:
        type: integer
    type: object
info:
  contact: {}
paths:
  /group/list:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/group.GroupInfoResp'
      summary: get groups I joined
      tags:
      - group
  /ping:
    get:
      description: test connection
      produces:
      - application/json
      responses:
        "200":
          description: '''pong'''
          schema:
            type: string
      summary: ping
      tags:
      - api
  /token/login:
    post:
      parameters:
      - description: login information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.AuthReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AuthResp'
      summary: login
      tags:
      - token
  /token/logout:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: '''logout'''
          schema:
            type: string
      summary: logout
      tags:
      - token
  /token/refresh:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AuthResp'
      summary: refresh token
      tags:
      - token
  /user/address:
    delete:
      parameters:
      - description: address information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/address.AddressDeleteReq'
      produces:
      - application/json
      responses:
        "200":
          description: '''success'''
          schema:
            type: string
      summary: delete address
      tags:
      - user
    post:
      parameters:
      - description: new address information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/address.AddressCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/address.AddressCreateResp'
      summary: add address
      tags:
      - user
  /user/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserInfoResp'
      summary: get user info
      tags:
      - user
    put:
      parameters:
      - description: user's new information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.UserModifyReq'
      produces:
      - application/json
      responses:
        "200":
          description: '''success'''
          schema:
            type: string
      summary: modify user info
      tags:
      - user
  /user/register:
    post:
      parameters:
      - description: register information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.UserCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserCreateResp'
      summary: register
      tags:
      - user
  /user/workinfo:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserDashboardResp'
      summary: dashboard
      tags:
      - user
  /version:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: version
          schema:
            type: string
      summary: get API version
      tags:
      - api
swagger: "2.0"
